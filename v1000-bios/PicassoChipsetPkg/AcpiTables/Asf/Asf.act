/** @file
   This file contains a structure definition for the ACPI 1.0 ASF (ASF!)

;*******************************************************************************
;* Copyright (c) 2013, Insyde Software Corporation. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;*******************************************************************************
*/


#include "Asf.h"

EFI_ACPI_1_0_ASF_DESCRIPTION_TABLE ASF_ = {
  {EFI_ACPI_1_0_ASF_DESCRIPTION_TABLE_SIGNATURE,
  sizeof (EFI_ACPI_1_0_ASF_DESCRIPTION_TABLE),
  EFI_ACPI_1_0_ASF_DESCRIPTION_TABLE_REVISION,
  0,                // to make sum of entire table == 0
  {'I', 'N', 'S', 'Y', 'D', 'E'},                     // OEM identification

  // OEM table identification
  ((((((((((((((UINT64)'M' << 8) + 'O') << 8) + 'R') << 8) + 'A') << 8) + 'Y') << 8) + ' ') << 8) + ' ') << 8) + ' ', // OEM table identification
  1,                // OEM revision number
  ((((('M' << 8) + 'S') << 8) + 'F') << 8) + 'T',  // ASL compiler vendor ID
  1000000},          // ASL compiler revision number

  //
  // ASF_INFO
  //
  {{0x00,               // Type "ASF_INFO"
  0x00,               // Reserved
  sizeof (EFI_ACPI_ASF_INFO)}, // Length
//[-start-200121-IB06070078-modify]//
  0xFF,               // Min Watchdog Reset Value - 00 indicates no timer
//[-end-200121-IB06070078-modify]//
  0xFF,               // Min ASF Sensor Inter-poll Wait Time
  0x0001,             // System ID
  0x57010000,         // IANA Manufacture ID
  0x00,               // Feature Flag
  {0x00, 0x00, 0x00}},   // Reserved

  //
  // ASF_ALRT
  //
  {{0x01,             // Type "ASF_ALRT"
  0x00,             // Reserved
  sizeof (EFI_ACPI_ASF_ALRT)}, // Length
  0x00,             // Assertion Event Bit Mask
  0x00,             // Deassertion Event Bit Mask
  0x03,             // Number Of Alerts
  0x0C,             // Array Element Length
  //
  // Slave SMBUS Read devices
  //
  {0x80, 0x23, 0x01, 0x01, 0x01, 0x01, 0x00, 0x39, 0x10, 0x00, 0x07, 0x00,  // Legacy Sensor 1_1
  0x80, 0x23, 0x02, 0x02, 0x01, 0x01, 0x00, 0x39, 0x10, 0x01, 0x07, 0x00,  // Legacy Sensor 1_2
  0x80, 0x23, 0x04, 0x04, 0x01, 0x01, 0x00, 0x39, 0x10, 0x02, 0x07, 0x00}},  // Legacy Sensor 1_3
//  0x80, 0x23, 0x08, 0x08, 0x01, 0x01, 0x00, 0x39, 0x10, 0x03, 0x07, 0x00,  // Legacy Sensor 1_4
//  0x80, 0x23, 0x10, 0x10, 0x01, 0x01, 0x00, 0x39, 0x10, 0x04, 0x03, 0x00,  // Legacy Sensor 1_5
//  0x80, 0x23, 0x20, 0x20, 0x04, 0x01, 0x00, 0x39, 0x10, 0x05, 0x07, 0x00,  // Legacy Sensor 1_6
//  0x80, 0x23, 0x40, 0x40, 0x04, 0x01, 0x00, 0x39, 0x10, 0x06, 0x07, 0x00,  // Legacy Sensor 1_7
//  0x80, 0x23, 0x80, 0x80, 0x04, 0x01, 0x00, 0x39, 0x10, 0x07, 0x07, 0x00,  // Legacy Sensor 1_8
//  0x82, 0x23, 0x01, 0x01, 0x02, 0x01, 0x00, 0x39, 0x10, 0x00, 0x07, 0x00,  // Legacy Sensor 2_1
//  0x82, 0x23, 0x02, 0x02, 0x02, 0x01, 0x00, 0x39, 0x10, 0x01, 0x07, 0x00,  // Legacy Sensor 2_2
//  0x82, 0x23, 0x04, 0x04, 0x02, 0x01, 0x00, 0x39, 0x10, 0x02, 0x07, 0x00,  // Legacy Sensor 2_3
//  0x82, 0x23, 0x08, 0x08, 0x02, 0x01, 0x00, 0x39, 0x10, 0x03, 0x07, 0x00,  // Legacy Sensor 2_4
//  0x82, 0x23, 0x10, 0x10, 0x02, 0x01, 0x00, 0x39, 0x10, 0x04, 0x07, 0x00,  // Legacy Sensor 2_5
//  0x82, 0x23, 0x20, 0x20, 0x02, 0x01, 0x00, 0x39, 0x10, 0x05, 0x07, 0x00,  // Legacy Sensor 2_6
//  0x82, 0x23, 0x40, 0x40, 0x02, 0x01, 0x00, 0x39, 0x10, 0x06, 0x07, 0x00,  // Legacy Sensor 2_7
//  0x82, 0x23, 0x80, 0x80, 0x02, 0x01, 0x00, 0x39, 0x10, 0x07, 0x07, 0x00,  // Legacy Sensor 2_8


  //
  // ASF_RCTL
  //
  {{0x02,              // Type "ASF_RCTL"
  0x00,              // Reserved
  sizeof (EFI_ACPI_ASF_RCTL)}, // Length
  0x04,              // Number of Controls
  0x04,              // Array Element Length
  0x0000,            // Reserved
  //
  // ICH Slave SMBUS Write cmds
  //
  {0x00, 0x71, 0x00, 0x00,     // Control 0 --> Reset system
  0x01, 0x71, 0x02, 0x00,     // Control 1 --> Power Off system
  0x02, 0x71, 0x01, 0x00,     // Control 2 --> Power On system
  0x03, 0x71, 0x03, 0x00}},     // Control 3 --> Power Cycle Reset (off then on)

  //
  // ASF_RCMP
  //
  {{0x03,               // Type "ASF_RCMP"
  0x00,               // Reserved
  sizeof (EFI_ACPI_ASF_RMCP)}, // Length

  // Remote Control Capabilities supported Bit Masks
  {0x21,                       // System Firmware Capabilities Bit Mask (two MSBytes are Rsvd,
  0xF8,                       // Two LSBytes support Lock KYBD, Power Button Lock, FW Verb Blank Screen,
  0x00,                       // Cfg Data Reset, FW Verb Quiet, FW Verb Verbose, FW Verb Forced Progress
  0x00,
  0x00,                       // Special Cmds Bit Mask (Rsvd MSByte, LSByte Does not supports
  0x1B,                       // CD/DVD Boot, Diag Boot, HD Safe-Mode Boot, HD Boot, PXE Boot.
  0xF0},                       // System Capabilities Bit Mask (Supports Reset,Power-Up,
                              // Power-Down, Power-Cycle Reset for compat and secure port.
  0x00,                       // Boot Option Complete Code
  0x57010000,                 // IANA ID
  0x00,                       // Special Command
//[-start-200121-IB06070078-modify]//
  {0x00,                       // Special Command Parameter [0]
  0x00},                       // Special Command Parameter [1]
  {0x01,                       // Boot Options [0]
  0x00},                       // Boot Options [1]
  {0x00,                       // OEM Parameters [0]
  0x00}},                       // OEM Parameters [1]
//[-end-200121-IB06070078-modify]//

  //
  // ASF_ADDR
  //
//[-start-200122-IB06070078-modify]//
  {{0x04,                         // Type "ASF_ADDR", last record
//[-end-200122-IB06070078-modify]//
  0x00,                         // Reserved
  sizeof (EFI_ACPI_ASF_ADDR)},   // Length
  0x00,                         // SEEPROM Address
  ASF_ADDR_DEVICE_ARRAY_LENGTH, // Number Of Devices
  {0xA0, 0xA2, 0xA4}}              // Fixed SMBus Address (Heceta 6, 82573E device - static def (also an ARP addr),
};

#ifdef __GNUC__
VOID*
ReferenceAcpiTable (
 VOID
 )

{
 return (VOID*)&ASF_;
}
#else
VOID
main (
 VOID
 )

{
  return;
}
#endif
