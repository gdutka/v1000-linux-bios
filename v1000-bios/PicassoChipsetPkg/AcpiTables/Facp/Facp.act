/** @file

;*******************************************************************************
;* Copyright (c) 2015, Insyde Software Corporation. All Rights Reserved.
;*
;* You may not reproduce, distribute, publish, display, perform, modify, adapt,
;* transmit, broadcast, present, recite, release, license or otherwise exploit
;* any part of this publication in any form, by any means, without the prior
;* written permission of Insyde Software Corporation.
;*
;*******************************************************************************
*/

#include <Facp.h>
#include <IndustryStandard/Acpi60.h>

EFI_ACPI_6_0_FIXED_ACPI_DESCRIPTION_TABLE FACP = {
  {
    EFI_ACPI_6_0_FIXED_ACPI_DESCRIPTION_TABLE_SIGNATURE,
    sizeof (EFI_ACPI_6_0_FIXED_ACPI_DESCRIPTION_TABLE),
    EFI_ACPI_6_0_FIXED_ACPI_DESCRIPTION_TABLE_REVISION,
    0,                  // to make sum of entire table == 0

    // OEM identification
    {EFI_ACPI_OEM_ID},

    // OEM table identification
    EFI_ACPI_OEM_TABLE_ID,

    // OEM revision number
    EFI_ACPI_OEM_REVISION,

    // ASL compiler vendor ID
    EFI_ACPI_CREATOR_ID,

    // ASL compiler revision number
    EFI_ACPI_CREATOR_REVISION,
  },
  0,                    // Physical addesss of FACS
  0,                    // Physical address of DSDT
  RESERVED,             // Reserved
  EFI_ACPI_3_0_PM_PROFILE_MOBILE,

  SCI_INT_VECTOR,       // System vector of SCI interrupt
  SMI_CMD_IO_PORT,      // Port address of SMI command port
  ACPI_ENABLE,          // Value to write to port smi_cmd to enable ACPI
  ACPI_DISABLE,         // Value to write to port smi_cmd to disable ACPI
  S4BIOS_REQ,           // Value to write to SMI CMD port to enter the S4BIOS state
  0,                    // PSTATE_CNT,
  PM1a_EVT_BLK,         // Port address of Power Mgt 1a Event Reg Blk
  PM1b_EVT_BLK,         // Port address of Power Mgt 1b Event Reg Blk
  PM1a_CNT_BLK,         // Port address of Power Mgt 1a Ctrl Reg Blk
  PM1b_CNT_BLK,         // Port address of Power Mgt 1b Ctrl Reg Blk
  PM2_CNT_BLK,          // Port address of Power Mgt 2  Ctrl Reg Blk
  PM_TMR_BLK,           // Port address of Power Mgt Timer Ctrl Reg Blk
  GPE0_BLK,             // Port addr of General Purpose Event 0 Reg Blk
  GPE1_BLK,             // Port addr of General Purpose Event 1 Reg Blk
  PM1_EVT_LEN,          // Byte Length of ports at pm1X_evt_blk
  PM1_CNT_LEN,          // Byte Length of ports at pm1X_cnt_blk
  PM2_CNT_LEN,          // Byte Length of ports at pm2_cnt_blk
  PM_TM_LEN,            // Byte Length of ports at pm_tm_blk
  GPE0_BLK_LEN,         // Byte Length of ports at gpe0_blk
  GPE1_BLK_LEN,         // Byte Length of ports at gpe1_blk
  GPE1_BASE,            // Offset in gpe model where gpe1 events start
  0,                    // CST_CNT,
  P_LVL2_LAT,           // Worst case HW latency to enter/exit C2 state
  P_LVL3_LAT,           // Worst case HW latency to enter/exit C3 state
  FLUSH_SIZE,           // Size of area read to flush caches
  FLUSH_STRIDE,         // Stride used in flushing caches
  DUTY_OFFSET,          // Bit location of duty cycle field in p_cnt reg
  DUTY_WIDTH,           // Bit width of duty cycle field in p_cnt reg
  DAY_ALRM,             // Index to day-of-month alarm in RTC CMOS RAM
  MON_ALRM,             // Index to month-of-year alarm in RTC CMOS RAM
  CENTURY,              // Index to century in RTC CMOS RAM

#ifndef LEGACY_FREE_SUPPORT
  EFI_ACPI_3_0_LEGACY_DEVICES | EFI_ACPI_3_0_8042,
#else
  0,
#endif

  RESERVED,             // Reserved
  FLAG,

  //
  // ResetReg;
  //     
  {
#ifndef LEGACY_FREE_SUPPORT
    0,
    0,
    0,
    0,
#else
    EFI_ACPI_3_0_SYSTEM_IO,
    0x8,
    0,
    EFI_ACPI_3_0_BYTE,
#endif
    0xCF9
  },
  //
  // ResetValue;
  //
  0x06,
  //
  //ArmBootArch;
  //
  0x00,
  //
  //MinorVersion
  //
  0x00,
  //
  // XFirmwareCtrl;
  //
  0,
  //
  // XDsdt;
  //
  0,
  //
  // XPm1aEvtBlk;
  //
  {
    EFI_ACPI_3_0_SYSTEM_IO,
    (PM1_EVT_LEN * 8),
    0,
    EFI_ACPI_3_0_DWORD,
    PM1a_EVT_BLK
  },
  //
  // XPm1bEvtBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  // XPm1aCntBlk;
  //
  {
    EFI_ACPI_3_0_SYSTEM_IO,
    (PM1_CNT_LEN * 8),
    0,
    EFI_ACPI_3_0_WORD,
    PM1a_CNT_BLK
  },
  //
  // XPm1bCntBlk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  // XPm2CntBlk;
  //
  {
    EFI_ACPI_3_0_SYSTEM_IO,
    (PM2_CNT_LEN * 8),
    0,
    EFI_ACPI_3_0_BYTE,
    PM2_CNT_BLK
  },
  //
  // XPmTmrBlk;
  //
  {
    EFI_ACPI_3_0_SYSTEM_IO,
    (PM_TM_LEN * 8),
    0,
    EFI_ACPI_3_0_DWORD,
    PM_TMR_BLK
  },
  //
  // XGpe0Blk;
  //
  {
    EFI_ACPI_3_0_SYSTEM_IO,
    (GPE0_BLK_LEN * 8),
    0,
    EFI_ACPI_3_0_QWORD,
    GPE0_BLK
  },
  //
  // XGpe1Blk;
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  // SleepControlReg
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  // SleepStatusReg
  //
  {
    0,
    0,
    0,
    0,
    0
  },
  //
  //HypervisorVendorIdentity
  //
  0x00
};

#if defined (__GNUC__)
VOID*
ReferenceAcpiTable (
  VOID
  )
{
  return (VOID*)&FACP;
}

#else
VOID
main (
 VOID
 )

{
}
#endif
