/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: NBIO
 * @e \$Revision: 61089 $   @e \$Date: 2011-10-31 10:31:02 -0700 (Mon, 31 Oct 2011) $
 *
 */
/*
*****************************************************************************
*
* Copyright (C) 2008-2022 Advanced Micro Devices, Inc. All rights reserved.
*
* ***************************************************************************
*
*/
  /*----------------------------------------------------------------------------------------*/
  /**
   *  Check if port support hotplug
   *
   *  Arg0 -  BDF
   */
  Method (procPcieIsPortHotplug, 1) {
    if (LNotEqual (LinkHotplug, 0x1)) {
      return (FALSE)
    }
    return (procPcieIsPort (Arg0))
  }


  /*----------------------------------------------------------------------------------------*/
  /**
   *  Hotplug
   *
   *  Arg0 -  ENABLE/DISABLE
   */

  Method (procPciePortHotplug, 1) {

    Name (varPmControl, 0)
    ALIB_DEBUG (" Disable ASPM on RC")
    Store (0, Local2)
    Store (bfPmControl, varPmControl)
    Or (PciFun, ShiftLeft (PciDev, 3), Local1)
    //
    // Check if we plug in or unplug
    //
    if (LEqual (Arg0, ENABLE)) {
      ALIB_DEBUG (" Hotplug Insertion")
       Store (0, bfLinkDis)
      Store (LinkStateReleaseTraining ,Local0)
    } else {
      ALIB_DEBUG (" Hotplug Removal")
      //
      // Disable ASPM on EP
      //
      procPcieEpAspm(DISABLE)
      Store (procPcieEpPciDwRd (0, 4), Local0)
      if (LNotEqual (Local0, 0xFFFFFFFF)) {
        procPcieEpPciDwWr (0, 4, And (Local0, Not (0x4)))
        Store (procPcieEpPciDwRd (1, 4), Local0)
        if (LNotEqual (Local0, 0xFFFFFFFF)) {
          procPcieEpPciDwWr (1, 4, And (Local0, Not (0x4)))
        }
      }
      //
      //procDxioServiceRequest (TBD, Local1, 0, 0, 0)
      //
      Store (0, Local2)

      Store (1, bfLinkDis)
      Store (LinkStateDeviceNotPresent ,Local0)
    }

    //
    // Disable ASPM on RC
    //
    Store (0, bfPmControl)

    while (LNotEqual (Local0, LinkStateTrainingCompleted)) {
      if (LEqual (Local0, LinkStateReleaseTraining)) {
        ALIB_DEBUG (" LinkStateReleaseTraining")
        //
        //procDxioServiceRequest (41, Local1, 0, 0, 0)
        procDxioServiceReq (41, Local1, 0, 0, 0)   //DXIO_MSG_RNTM_PCIERETRAIN
        Store (1, Local2)
        //
        // Determine new state of port from DXIO firmware
        Store (LinkStateTrainingCompleted, Local0)
      }
      if (LEqual (Local0, LinkStateDeviceNotPresent)) {
        ALIB_DEBUG (" Device not Present")
        //
        // Dummy read to update link state
        //
        procPcieEpPciDwRd (0x0, 0x0)
        //
        //  Put training on hold
        //
        ALIB_DEBUG (" HoldTraining")
        //procDxioServiceRequest (??, Local1, 0, 0, 0)
        procDxioServiceReq (42, Local1, 0, 0, 0)  //DXIO_MSG_RNTM_PCIEDISABLE
        //
        // Remove overrides
        //
        Store (0x0, PcieLocalOverrideSpeed)
        Store (0x0, PcieLinkSafeMode)
        Store (0x0, PciePortRequest)
        //
        //  Return value
        //
        Store (0x0, Local2)
        //
        // Move to next state
        //
        Store (LinkStateTrainingCompleted, Local0)
      }
    }
    //
    // restore ASPM on RC
    //
    ALIB_DEBUG (" restore ASPM on RC")
    Store (varPmControl, bfPmControl)
    if (LNotEqual (varPmControl, 0)) {
      procPcieEpAspm(ENABLE)
    }
    return (Local2)
  }


