/**
 * @file
 *
 * ALIB ASL library
 *
 *
 *
 * @xrefitem bom "File Content Label" "Release Content"
 * @e project:     AGESA
 * @e sub-project: GNB
 * @e \$Revision: 324183 $   @e \$Date: 2015-08-13 11:24:44 +0800 (Thu, 13 Aug 2015) $
 *
 */
/*
*****************************************************************************
*
* Copyright (C) 2008-2022 Advanced Micro Devices, Inc. All rights reserved.
*
* ***************************************************************************
*
*/

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SMU Service request
   *
   *  Arg0 - Smu service ID
   *  Arg1 - Smu service parameters
   *
   */
  Method (procGnbSmuServiceReq, 2, Serialized) {
    ALIB_DEBUG (" GnbSmuServiceReq Enter")

    // Define Arg1 for function 0
    CreateDWordField(Arg1,  0, varSmuParam0)           // SMU service Request Argument 0
    CreateDWordField(Arg1,  4, varSmuParam1)           // SMU service Request Argument 1
    CreateDWordField(Arg1,  8, varSmuParam2)           // SMU service Request Argument 2
    CreateDWordField(Arg1, 12, varSmuParam3)           // SMU service Request Argument 3
    CreateDWordField(Arg1, 16, varSmuParam4)           // SMU service Request Argument 4
    CreateDWordField(Arg1, 20, varSmuParam5)           // SMU service Request Argument 5

    ALIB_DEBUG (Concatenate ("  Smu service id = ", ToHexString (Arg0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument0 = ", ToHexString (varSmuParam0), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument1 = ", ToHexString (varSmuParam1), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument2 = ", ToHexString (varSmuParam2), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument3 = ", ToHexString (varSmuParam3), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument4 = ", ToHexString (varSmuParam4), ADBG))
    ALIB_DEBUG (Concatenate ("  Smu service argument5 = ", ToHexString (varSmuParam5), ADBG))

    // 1 Clear Response
    ALIB_DEBUG ("--Clear Response--")
    Store (0, bfSmuMessageResponse)

    while (LNotEqual (bfSmuMessageResponse, 0)) {
    }

    // 2 Write message arguments
    Store (varSmuParam0, bfSmuMessageArgument0)
    Store (varSmuParam1, bfSmuMessageArgument1)
    Store (varSmuParam2, bfSmuMessageArgument2)
    Store (varSmuParam3, bfSmuMessageArgument3)
    Store (varSmuParam4, bfSmuMessageArgument4)
    Store (varSmuParam5, bfSmuMessageArgument5)

    // 3 Write message ID
    Store (Arg0, bfSmuMessageId)

    // 4 Poll Response until non-zero
    while (LEqual (bfSmuMessageResponse, 0)) {
        ALIB_DEBUG ("--Poll Response until non-zero--")
    }

    // 5 Read updated SMU message arguments if necessary

    ALIB_DEBUG ("GnbSmuServiceReq Exit")
  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  SB port visability control
   *
   *  Arg0 - Smu service ID
   *
   */
  Method (procGnbSbPort, 1) {

  }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage Mem PS
   *
   *
   *  Arg0 - ON/OFF
   *
   */
   Method (procMemePSManage, 1) {
    Store (bfSwNbPstateLoDis, Local0)
    if (LEqual (Arg0, OFF)) {
      Store (0x1, bfSwNbPstateLoDis)
      ALIB_DEBUG (" Mem PS OFF!!!")
    } else {
      Store (0x0, bfSwNbPstateLoDis)
      ALIB_DEBUG (" Mem PS ON!!!")
    }
     return (Local0)
   }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Manage BAPM
   *
   *
   *  Arg0 - ON/OFF (ON means restore original state)
   */
    Method (procBapmManage, 1) {
      if (LEqual (Arg0, OFF)) {
        ALIB_DEBUG ("Disable BAPM and NBDPM")
       // Send msg to smu services to apply voltage change.
        // Local7 as an input buffer and passed to procGnbSmuServiceReq
        Store (Buffer (24) {}, Local7)
        CreateDWordField (Local7, 0,  varSmuArg0)
        CreateDWordField (Local7, 4,  varSmuArg1)
        CreateDWordField (Local7, 8,  varSmuArg2)
        CreateDWordField (Local7, 12, varSmuArg3)
        CreateDWordField (Local7, 16, varSmuArg4)
        CreateDWordField (Local7, 20, varSmuArg5)
        Store (0x0801, varSmuArg0)
        procGnbSmuServiceReq (0x60, Local7)
      }
    }

  /*----------------------------------------------------------------------------------------*/
  /**
   *  Process SMU msg on S3 Entry
   *
   *
   *  Arg0 - ON/OFF (ON means resume form S3, OFF means enterinto S3)
   */
    Method (procS3Entry, 1) {
      Store (Buffer (24) {}, Local7)
      CreateDWordField (Local7, 0,  varSmuArg0)
      CreateDWordField (Local7, 4,  varSmuArg1)
      CreateDWordField (Local7, 8,  varSmuArg2)
      CreateDWordField (Local7, 12, varSmuArg3)
      CreateDWordField (Local7, 16, varSmuArg4)
      CreateDWordField (Local7, 20, varSmuArg5)

      if (LOr (LEqual (bfGPU_DIS, 1), LEqual (bfForceIntGfxDisable, 1))) {
        if (LEqual (Arg0, OFF)) {
          ALIB_DEBUG ("enter into S3")
          // Send msg(0x86) to notify SMU enter into S3.
          procGnbSmuServiceReq (0x86, Local7)
        }
        //else {
        //  ALIB_DEBUG ("resume form S3")
        //  // Send msg(0x87) to notify SMU resume form S3.
        //  procGnbSmuServiceReq (0x87, Local7)
        //}
      }
      //Sleep (10)
    }
